# Set the color scheme 
colorscheme solarized-dark

# Width of a tab
set-option global tabstop 4

# Indent with 4 spaces
set-option global indentwidth 4

# Always keep one line and three columns displayed around the cursor
set-option global scrolloff 1,3

# Display the status bar on top
set-option global ui_options ncurses_status_on_top=true

# Display line numbers
add-highlighter global/ number-lines -hlcursor

# Highlight trailing whitespace
add-highlighter global/ regex \h+$ 0:Error

# Softwrap long lines
add-highlighter global/ wrap -word -indent

# Show {matching brackets}
add-highlighter global/ show-matching

# Clippy to none
set-option global ui_options terminal_assistant=none

#######
### MAPS
#######
# LSP setup
eval %sh{kak-lsp --kakoune -s $kak_session}
hook global WinSetOption filetype=(rust|python|go|c|haskell|markdown) %{
    lsp-enable-window
}

# LSP maps
map global user l %{:enter-user-mode lsp<ret>} -docstring "LSP mode"
map global insert <tab> '<a-;>:try lsp-snippets-select-next-placeholders catch %{ execute-keys -with-hooks <lt>tab> }<ret>' -docstring 'Select next snippet placeholder'
map global object a '<a-semicolon>lsp-object<ret>' -docstring 'LSP any symbol'
map global object <a-a> '<a-semicolon>lsp-object<ret>' -docstring 'LSP any symbol'
map global object e '<a-semicolon>lsp-object Function Method<ret>' -docstring 'LSP function or method'
map global object k '<a-semicolon>lsp-object Class Interface Struct<ret>' -docstring 'LSP class interface or struct'
map global object d '<a-semicolon>lsp-diagnostic-object --include-warnings<ret>' -docstring 'LSP errors and warnings'
map global object D '<a-semicolon>lsp-diagnostic-object<ret>' -docstring 'LSP errors'

# Same clipboard with system
# map global user y "<a-|>wl-copy<ret>"
hook global RegisterModified '"' %{ nop %sh{
  printf %s "$kak_main_reg_dquote" | wl-copy > /dev/null 2>&1 &
}}
# map global user p "<a-!> wl-paste<ret>"

# Code actions
map global normal '#' :comment-line<ret>
map global normal <c-l> :lint<ret>

# Kind of autopair without plugins
map global insert '(' '()<left>'
map global insert '[' '[]<left>'
map global insert '{' '{}<left>'
# map global insert '<' "\<\><left>"
map global insert "'" "''<left>"
map global insert '"' '""<left>'
map global insert '`' '``<left>'

# TODO: move by visible lines
# TODO: tabs like in nvim
# TODO: smarttab https://github.com/mawww/kakoune/wiki/Indentation-and-Tabulation
# TODO: stuff on right side https://github.com/mawww/kakoune/wiki
