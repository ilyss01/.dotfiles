# Color
colorscheme solarized-dark

###########
# BEHAVIOUR
###########
# LSP
eval %sh{kak-lsp --kakoune --session "$kak_session"}
lsp-enable
#enable-auto-pairs

hook global ModuleLoaded clang %{ set-option global clang_options --std=c17 }

hook global InsertCompletionShow .* %{ map window insert <tab> <c-n>; map window insert <s-tab> <c-p> }
hook global InsertCompletionHide .* %{ unmap window insert <tab> <c-n>; unmap window insert <s-tab> <c-p> }

hook global WinSetOption filetype=(c|cpp) %{
    # hook global WinSetOption filetype=c %{ set-option global clang_options --std=c17 }
    # hook global WinSetOption filetype=cpp %{ set-option global clang_options --std=cpp17 }
    clang-enable-autocomplete 
    clang-enable-diagnostics
    alias window lint clang-parse
    alias window lint-next-error clang-diagnostics-next
}

hook global WinSetOption filetype=python %{
    jedi-enable-autocomplete
    lint-enable
    set-option global lintcmd 'flake8'
}

# Tab width, indent
set-option global tabstop 4
set-option global indentwidth 4

# Set cmd
#set-option global termcmd 'foot -e sh'
#set-option global grepcmd 'rg --vimgrep --hidden'

# 5 lines and 3 colums
set-option global scrolloff 5,3

# Display the status bar on top
# didn't work for me?
#set-option global ui_options ncurses_status_on_top=true

#####
## UI
#####

# Display line numbers
add-highlighter global/ number-lines -hlcursor

# Highlight trailing whitespace
add-highlighter global/ regex \h+$ 0:Error

# Softwrap long lines
add-highlighter global/ wrap -word -indent

add-highlighter global/ show-matching

#######
### MAPS
#######

# LSP
map global user l %{:enter-user-mode lsp<ret>} -docstring "LSP mode"
map global insert <tab> '<a-;>:try lsp-snippets-select-next-placeholders catch %{ execute-keys -with-hooks <lt>tab> }<ret>' -docstring 'Select next snippet placeholder'
map global object a '<a-semicolon>lsp-object<ret>' -docstring 'LSP any symbol'
map global object <a-a> '<a-semicolon>lsp-object<ret>' -docstring 'LSP any symbol'
map global object e '<a-semicolon>lsp-object Function Method<ret>' -docstring 'LSP function or method'
map global object k '<a-semicolon>lsp-object Class Interface Struct<ret>' -docstring 'LSP class interface or struct'
map global object d '<a-semicolon>lsp-diagnostic-object --include-warnings<ret>' -docstring 'LSP errors and warnings'
map global object D '<a-semicolon>lsp-diagnostic-object<ret>' -docstring 'LSP errors'

# Clipboard
map -docstring "yank the selection into the clipboard" global user y "<a-|>wl-copy<ret>"
map -docstring "paste the clipboard" global user p "<a-!> wl-paste<ret>"

# Custom one
map global normal '#' :comment-line<ret>
map global normal <c-l> :lint<ret>
